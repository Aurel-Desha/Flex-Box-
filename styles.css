

* {
    box-sizing: border-box;
  }
  
  body {
    margin: 0;
    font-family: sans-serif;
    background: #f5f6f7;
  }
  
  .header {
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
  }
  
  .gallery {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    gap: 16px;
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px 10px;
  }
  
  .gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    object-fit: cover;
    border-radius: 10px;
  }
  
  .gallery::after {
    content: "";
    width: 350px;
  }
  
/*
-----------------------BOX-SIZING--------------------------------
///Border-box
The box-sizing property is used to set this behavior. By default, the content-box model is used. 
With this model, when an element has a specific width, that width is calculated based only on the element's content. 
Padding and border values get added to the total width, so the element grows to accommodate these values.

///Content-box
The border-box sizing model does the opposite of content-box. The total width of the element, 
including padding and border, will be the explicit width set.
 The content of the element will shrink to make room for the padding and border.


 -----------------------DISPLAY FLEX--------------------------------------

 ////flex direction 
 Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top
Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.

///Flex Wrap
The flex-wrap property determines how your flex items behave when the flex container is too small.
 Setting it to wrap will allow the items to wrap to the next row or column.
 nowrap (default) will prevent your items from wrapping and shrink them if needed.


------------IMAGE--------------------------------------------
//////----------Property object-fit-----------------------------------------------
Notice how some of your images have become distorted. This is because the images have different aspect ratios.
 Rather than setting each aspect ratio individually,
 you can use the object-fit property to determine how images should behave.

 /////////////Gap Property-------------------
 The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns.
  The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, 
 grid, and multi-column layout. You apply the property to the container element.

 */